# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from lstream.proto import raft_pb2 as raft__pb2


class RaftConsensusServiceStub(object):
    """Raft Consensus Service Definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.handle_request_vote = channel.unary_unary(
                '/RaftConsensusService/handle_request_vote',
                request_serializer=raft__pb2.AskForVoteRequest.SerializeToString,
                response_deserializer=raft__pb2.AskForVoteReply.FromString,
                )
        self.handle_append_entries = channel.unary_unary(
                '/RaftConsensusService/handle_append_entries',
                request_serializer=raft__pb2.AppendEntriesRequest.SerializeToString,
                response_deserializer=raft__pb2.AppendEntriesReply.FromString,
                )


class RaftConsensusServiceServicer(object):
    """Raft Consensus Service Definition.
    """

    def handle_request_vote(self, request, context):
        """RequestVote handler
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def handle_append_entries(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RaftConsensusServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'handle_request_vote': grpc.unary_unary_rpc_method_handler(
                    servicer.handle_request_vote,
                    request_deserializer=raft__pb2.AskForVoteRequest.FromString,
                    response_serializer=raft__pb2.AskForVoteReply.SerializeToString,
            ),
            'handle_append_entries': grpc.unary_unary_rpc_method_handler(
                    servicer.handle_append_entries,
                    request_deserializer=raft__pb2.AppendEntriesRequest.FromString,
                    response_serializer=raft__pb2.AppendEntriesReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'RaftConsensusService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RaftConsensusService(object):
    """Raft Consensus Service Definition.
    """

    @staticmethod
    def handle_request_vote(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RaftConsensusService/handle_request_vote',
            raft__pb2.AskForVoteRequest.SerializeToString,
            raft__pb2.AskForVoteReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def handle_append_entries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/RaftConsensusService/handle_append_entries',
            raft__pb2.AppendEntriesRequest.SerializeToString,
            raft__pb2.AppendEntriesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
